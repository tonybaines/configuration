apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'codenarc'
apply plugin: 'jdepend'
apply plugin: 'build-dashboard'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'signing'
apply plugin: 'java-library-distribution'
buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
  }
}
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = 'com.github.tonybaines'
version = '0.8.9'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  jcenter()
}
dependencies {
  compile([
    'org.codehaus.groovy:groovy-all:2.3.3',
    'com.google.guava:guava:15.0',
    'org.slf4j:slf4j-api:1.6.1',
    'org.hibernate:hibernate-validator:5.1.0.CR1',
    'javax.el:javax.el-api:2.2.4',
    'org.glassfish.web:javax.el:2.2.4',
  ])

  testCompile([
    'org.spockframework:spock-core:1.0-groovy-2.4',
  ])

  testRuntime([
    'org.objenesis:objenesis:1.2',
    'org.slf4j:slf4j-simple:1.6.1',
  ])
  runtime([])
}

/* The java-library-distribution plugin*/
distributions {
  main {
    baseName = "${project.group}-${project.name}"
  }
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}
task testSourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'tests'
  from sourceSets.test.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}
// add javadoc/source/test jar tasks as artifacts
artifacts {
  archives sourcesJar, javadocJar, testSourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact testSourcesJar
      artifact javadocJar

      pom.withXml {
        asNode().appendNode('name', 'gestalt')
        asNode().appendNode('description', 'Gestalt is a library for making configuration easier in Java')
        asNode().appendNode('url', 'https://github.com/tonybaines/gestalt')

        def scm = asNode().appendNode('scm')
        scm.appendNode('url', 'git@github.com:tonybaines/gestalt.git')
        scm.appendNode('connection', 'scm:git@github.com:tonybaines/gestalt.git')
        scm.appendNode('developerConnection', 'scm:git@github.com:tonybaines/gestalt.git')

        def lic = asNode().appendNode('licenses')
          .appendNode('license')
        lic.appendNode('name', 'The Apache Software License, Version 2.0')
        lic.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        lic.appendNode('distribution', 'repo')

        def dev = asNode().appendNode('developers')
          .appendNode('developer')
        dev.appendNode('id', 'tonybaines')
        dev.appendNode('name', 'Tony Baines')

        // Workaround for the maven-publish-plugin marking all deps as runtime scope
        // http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime
        asNode().dependencies.'*'.findAll() {
          it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each() {
          it.scope*.value = 'compile'
        }
      }
    }
  }
}

String safeGetProp(String name) { hasProperty(name) ? getProperty(name) : System.getenv(name) }

bintray {
  user = safeGetProp('bintrayUser')
  key = safeGetProp('bintrayApiKey')

  publications = ['mavenJava'] //When uploading Maven-based publication files

  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'maven'
    name = "${project.group}:${project.name}"
    desc = 'A JVM config framework written in Groovy'
    websiteUrl = 'https://github.com/tonybaines/gestalt'
    issueTrackerUrl = 'https://github.com/tonybaines/gestalt/issues'
    vcsUrl = 'https://github.com/tonybaines/gestalt.git'
    licenses = ['Apache-2.0']
    labels = ['configuration', 'groovy', 'java']
    publicDownloadNumbers = true
    //Optional version descriptor
    version {
      gpg {
        sign = true //Determines whether to GPG sign the files. The default is false
        passphrase = safeGetProp('signing.password')
      }
      mavenCentralSync {
        sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
        user = safeGetProp('nexusUsername') //OSS user token
        password = safeGetProp('nexusPassword') //OSS user password
        close = '1'
        //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by putting 0 as value) and release the version manually.
      }
    }
  }
}

/* Static Analysis */
codenarc {
  ignoreFailures = true
  configFile = file("${project.projectDir}/config/codenarc/codenarc.groovy")
  toolVersion = "0.20"
}
tasks.withType(CodeNarc) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}
tasks.withType(JDepend) {
  reports {
    xml.enabled = false
    text.enabled = true
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}